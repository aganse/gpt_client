#!/bin/bash

# Basic command-line ChatGPT-API repr in Bash, taking advantage of shell tools
# like readline, syntax highlighting, prompt formatting, etc.
# Usage: for now the options are all in vars at top of script, not in cmdline args
# yet; you can keep the default vars and run ./bashgpt at the commandline to start.
#
# Dependencies: bash, jq, rlwrap, rich-cli (rich-cli is optional: set use_formatter=0 to skip it)
#
# Model choices/explanations at:
#   https://learn.microsoft.com/en-us/azure/cognitive-services/openai/concepts/models
# More detailed usage instructions for these models in terms of crafting queries:
#   https://learn.microsoft.com/en-us/azure/cognitive-services/openai/how-to/chatgpt?pivots=programming-language-chat-completions
# Details about additional chatgpt parameters for tuning functionality:
#   https://platform.openai.com/docs/api-reference/chat/create
#
# Author: Andy Ganse
# License: MIT License


# in the following settings, 0=no and 1=yes:
output_tokens=1  # 0=don't list tokens per transaction; 1=do list at end of each response
use_formatter=1  # 0=no syntax highlighting via mdo, just line wrap; 1=use mdo
debug=0          # 0=normal mode; 1=debug mode listing input/output json api content
formatter_style="vs"  # for rich-cli formatting (see https://pygments.org/styles)
                           # I like "monokai" in dark mode and "vs" in light mode
model="gpt-3.5-turbo"      # "gpt-3.5-turbo" or "gpt-4" (note gpt-4 has a waitlist)
me_prompt=") Me:"     # " ðŸ”µ"
gpt_prompt=") ${gpt_prompt}$(echo ${model} | tr 'gpt' 'GPT')"   # " ðŸŸ "

# Initial message describing role of system, defining scope/form of interactions
messages='{"role": "system", "content": "The following is a conversation with '
messages+='an AI assistant. The assistant is helpful, creative, clever, and friendly. '
messages+='Its answers are polite and friendly but brief, only rarely exceeding '
messages+='a single paragraph when really necessary to explain a point. '
messages+='The assistant labels all markdown code snippets with the code language. '
messages+='Mathematical answers and expressions written by the assistant should '
messages+='are always formatted in unicode characters rather than latex. '
messages+='And the assistant uses occasional emojis in its writing to show enthusiasm."}'

i=1  # count of user messages
while :
do
    echo
    if [ "${use_formatter}" -eq "1" ]; then
        echo "**${i}${me_prompt}**" | rich --markdown - --force-terminal
    else
        echo "${i}${me_prompt}"
    fi
    HISTORY=$HOME/.chatgpt_history
    userinput=$(rlwrap -H $HISTORY sh -c 'read REPLY && echo $REPLY')
    userinput="${userinput//\"/\\\"}"        # escape \
    #userinput="${userinput//\'/''''}"       # escape ' 
    userinput="${userinput//\~/\\\~}"        # escape ~
    userinput="${userinput//\*/\\*}"         # escape *
    messages+=( '{"role": "user", "content": "'"${userinput}"'"}' )

    # Convert messages list into comma-separated string, removing final comma:
    msgs_string=$(printf '%s,' "${messages[@]}")
    msgs_string=${msgs_string%?}  

    if [ "${debug}" -eq "1" ]; then
        echo "INPUT: ${msgs_string}"
    fi

    output=$(                                                                  \
    curl -s -X POST "https://api.openai.com/v1/chat/completions"               \
    --header "Authorization: Bearer ${OPENAI_API_KEY}"                         \
    --header "Content-Type: application/json"                                  \
    --data-raw '{ "model": "'"${model}"'", "messages": ['"${msgs_string}"'] }' \
    )

    if [ "${debug}" -eq "1" ]; then
        echo "OUTPUT: ${output}"
    fi

    error=$(echo "${output}" | jq '.error.message // empty')

    if [ ! -z "${error}" ]; then
        echo "${error}"
    else
        if [ "${output_tokens}" -eq "1" ]; then
            prompt_tokens=$(echo "${output}" | jq .usage.prompt_tokens)
            completion_tokens=$(echo "${output}" | jq .usage.completion_tokens)
            if [ "${use_formatter}" -eq "1" ]; then
                echo "[${prompt_tokens} tokens; includes message history in this session]" | \
                    rich - --force-terminal -s "#bbbbbb"
            else
                echo "[${prompt_tokens} tokens; includes message history in this session]"
            fi
        fi
        response=$(echo "${output}" | jq '.choices[0]'.message.content)
        response=${response:1:${#response}-2}  # remove surrounding double-quotes
        # escape for string printing, not exactly same as escapes for json:
        responseout="${response//\%/\%\%}"         # escape %
        #responseout="${responseout//\\/\\\\}"     # escape \

        echo
        if [ "${use_formatter}" -eq "1" ]; then
            echo "**${i}${gpt_prompt}**" | rich --markdown - --force-terminal
        else
            echo "${i}${gpt_prompt}"
        fi
        twidth=$(stty size | awk '{print $2}')
        if [ "${use_formatter}" -eq "1" ]; then
            printf "${responseout}\n" | \
                rich --markdown --theme ${formatter_style} - --force-terminal
        else
            # requery terminal width in case changed since last round
            responseout=$(echo ${responseout} | fold -sw ${twidth})
            printf "${responseout}\n"
        fi
        if [ "${output_tokens}" -eq "1" ]; then
            if [ "${use_formatter}" -eq "1" ]; then
                echo "[${completion_tokens} tokens]" | \
                    rich - --force-terminal -s "#aaaaaa"
            else
                echo "[${completion_tokens} tokens]"
            fi
        fi

        # chatgpt already escapes its own double quotes...
        response="${response//\'/''''}"        # escape single quotes
        response="${response//\%/\\\%}"        # escape %
        response="${response//\~/\\\~}"        # escape ~
        response="${response//\*/\\\*}"         # escape *
        messages+=( '{"role": "assistant", "content": "'"${response}"'"}' )
        
    fi
    i=$((i+1))
done

